let logErrorEvent,CategoryRepository;_6c1‍.x([["getAllCategory",()=>getAllCategory],["getAllById",()=>getAllById],["addCategory",()=>addCategory],["updateCategory",()=>updateCategory],["deleteCategory",()=>deleteCategory]]);_6c1‍.w("../events/logging.event",[["logErrorEvent",["logErrorEvent"],function(v){logErrorEvent=v}]]);_6c1‍.w("../repository/CategoryRepository",[["default",["CategoryRepository"],function(v){CategoryRepository=v}]]);


const categoryRepository = new CategoryRepository();

       const getAllCategory = async (req, res, categoryService) => {
  try {
    const rows = await categoryService
      .setRepository(categoryRepository)
      .getAllCategory();
    return res.status(200).json(rows);
  } catch (error) {
    logErrorEvent.emit("CONTROLLER", error, res);
  }
};

       const getAllById = async (req, res, categoryService) => {
  try {
    const rows = await categoryService
      .setRepository(categoryRepository)
      .getAllCategoryByCategoryId(req.params.id);
    return res.status(200).json(rows);
  } catch (err) {
    logErrorEvent.emit("CONTROLLER", err, res);
  }
};

       const addCategory = async (req, res, categoryService) => {
  try {
    const category = { ...req.body };
    const result = await categoryService
      .setRepository(categoryRepository)
      .saveCategory(category);
    return res.status(200).json(result);
  } catch (err) {
    logErrorEvent.emit("CONTROLLER", err, res);
  }
};

       const updateCategory = async (req, res, categoryService) => {
  try {
    const category = { ...req.body };
    const result = await categoryService
      .setRepository(categoryRepository)
      .updateCategory(category);
    return res.status(200).json(result);
  } catch (err) {
    logErrorEvent.emit("CONTROLLER", err, res);
  }
};

       const deleteCategory = async (req, res, categoryService) => {
  try {
    const category = { id: req.body.id };
    _6c1‍.g.console.log(category);
    const result = await categoryService
      .setRepository(categoryRepository)
      .deleteCategory(category);
    return res.status(200).json(result);
  } catch (err) {
    logErrorEvent.emit("CONTROLLER", err, res);
  }
};
