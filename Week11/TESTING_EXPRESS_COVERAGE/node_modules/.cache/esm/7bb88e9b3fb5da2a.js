let logErrorEvent,UserRepository;_3fb‍.x([["getAllUser",()=>getAllUser],["getAllUserById",()=>getAllUserById],["addUser",()=>addUser]]);_3fb‍.w("../events/logging.event",[["logErrorEvent",["logErrorEvent"],function(v){logErrorEvent=v}]]);_3fb‍.w("../repository/UserRepository",[["default",["UserRepository"],function(v){UserRepository=v}]]);


const userRepository = new UserRepository();

       const getAllUser = async (req, res, userService) => {
  try {
    const rows = await userService.setRepository(userRepository).getAllUser();
    return res.status(200).json(rows);
  } catch (error) {
    logErrorEvent.emit("CONTROLLER", error, res);
  }
};

       const getAllUserById = async (req, res, userService) => {
  try {
    const rows = await userService
      .setRepository(userRepository)
      .getAllUserById(req.params.id);
    return res.status(200).json(rows);
  } catch (err) {
    logErrorEvent.emit("CONTROLLER", err, res);
  }
};

       const addUser = async (req, res, userService) => {
  try {
    const user = { ...req.body };
    const result = await userService
      .setRepository(userRepository)
      .saveUser(user);
    return res.status(200).json(result);
  } catch (err) {
    logErrorEvent.emit("CONTROLLER", err, res);
  }
};
