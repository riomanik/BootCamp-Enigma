let configure,createConnection,ProductSchema,CategorySchema,StatusSchema,UserSchema,UserInfoSchema;_879‍.x([["default",()=>_879‍.o]]);_879‍.w("../config",[["default",["configure"],function(v){configure=v}]]);_879‍.w("typeorm",[["createConnection",["createConnection"],function(v){createConnection=v}]]);_879‍.w("../entities/product.schema",[["default",["ProductSchema"],function(v){ProductSchema=v}]]);_879‍.w("../entities/category.schema",[["default",["CategorySchema"],function(v){CategorySchema=v}]]);_879‍.w("../entities/status.schema",[["default",["StatusSchema"],function(v){StatusSchema=v}]]);_879‍.w("../entities/user.schema",[["default",["UserSchema"],function(v){UserSchema=v}]]);_879‍.w("../entities/userInfo.schema",[["default",["UserInfoSchema"],function(v){UserInfoSchema=v}]]);







const { dbType, dbHost, dbPort, dbUser, dbPassword, dbName } = configure();

const createDbConnection = async () => {
  const connection = await createConnection({
    type: dbType || "mysql",
    host: dbHost || "localhost",
    port: dbPort || 3306,
    username: dbUser || "root",
    password: dbPassword || "",
    database: dbName || "express_database",
    // debug:true,
    entities: [
      ProductSchema,
      CategorySchema,
      StatusSchema,
      UserSchema,
      UserInfoSchema
    ]
  });

  return connection;
};

_879‍.d(createDbConnection);
