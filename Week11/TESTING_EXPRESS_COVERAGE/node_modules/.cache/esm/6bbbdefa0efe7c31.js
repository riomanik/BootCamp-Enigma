let logErrorEvent,UserInfoRepository;_0ef‍.x([["getAllUserInfo",()=>getAllUserInfo],["getAllUserInfoById",()=>getAllUserInfoById]]);_0ef‍.w("../events/logging.event",[["logErrorEvent",["logErrorEvent"],function(v){logErrorEvent=v}]]);_0ef‍.w("../repository/UserInfoRepository",[["default",["UserInfoRepository"],function(v){UserInfoRepository=v}]]);


const userInfoRepository = new UserInfoRepository();

       const getAllUserInfo = async (req, res, userInfoService) => {
  try {
    const rows = await userInfoService
      .setRepository(userInfoRepository)
      .getAllUserInfo();
    return res.status(200).json(rows);
  } catch (error) {
    logErrorEvent.emit("CONTROLLER", error, res);
  }
};

       const getAllUserInfoById = async (req, res, userInfoService) => {
  try {
    const rows = await userInfoService
      .setRepository(userInfoRepository)
      .getAllUserInfoById(req.params.id);
    return res.status(200).json(rows);
  } catch (err) {
    logErrorEvent.emit("CONTROLLER", err, res);
  }
};
